// Copyright (c) 2014-2016 The btcsuite developers
// Use of this source code is governed by an ISC
// license that can be found in the LICENSE file.

package chaincfg

import (
	"bytes"
	"testing"

	"github.com/davecgh/go-spew/spew"
)

// TestGenesisBlock tests the genesis block of the main network for validity by
// checking the encoded bytes and hashes.
func TestGenesisBlock(t *testing.T) {
	// Encode the genesis block to raw bytes.
	var buf bytes.Buffer
	err := MainNetParams.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestGenesisBlock: %v", err)
	}

	// Ensure the encoded block matches the expected bytes.
	if !bytes.Equal(buf.Bytes(), genesisBlockBytes) {
		t.Fatalf("TestGenesisBlock: Genesis block does not appear valid - "+
			"got %v, want %v", spew.Sdump(buf.Bytes()),
			spew.Sdump(genesisBlockBytes))
	}

	// Check hash of the block against expected hash.
	hash := MainNetParams.GenesisBlock.BlockHash()
	if !MainNetParams.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestGenesisBlock: Genesis block hash does not "+
			"appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(MainNetParams.GenesisHash))
	}
}

// TestRegTestGenesisBlock tests the genesis block of the regression test
// network for validity by checking the encoded bytes and hashes.
// TODO(prova): Fix by replacing bytes of genesis block
func TestRegTestGenesisBlock(t *testing.T) {
	// Encode the genesis block to raw bytes.
	var buf bytes.Buffer
	err := RegressionNetParams.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestRegTestGenesisBlock: %v", err)
	}

	// Ensure the encoded block matches the expected bytes.
	if !bytes.Equal(buf.Bytes(), regTestGenesisBlockBytes) {
		t.Fatalf("TestRegTestGenesisBlock: Genesis block does not "+
			"appear valid - got %v, want %v",
			spew.Sdump(buf.Bytes()),
			spew.Sdump(regTestGenesisBlockBytes))
	}

	// Check hash of the block against expected hash.
	hash := RegressionNetParams.GenesisBlock.BlockHash()
	if !RegressionNetParams.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestRegTestGenesisBlock: Genesis block hash does "+
			"not appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(RegressionNetParams.GenesisHash))
	}
}

// TestTestNet3GenesisBlock tests the genesis block of the test network (version
// 3) for validity by checking the encoded bytes and hashes.
func TestTestNet3GenesisBlock(t *testing.T) {
	// Encode the genesis block to raw bytes.
	var buf bytes.Buffer
	err := TestNet3Params.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestTestNet3GenesisBlock: %v", err)
	}

	// Ensure the encoded block matches the expected bytes.
	if !bytes.Equal(buf.Bytes(), testNet3GenesisBlockBytes) {
		t.Fatalf("TestTestNet3GenesisBlock: Genesis block does not "+
			"appear valid - got %v, want %v",
			spew.Sdump(buf.Bytes()),
			spew.Sdump(testNet3GenesisBlockBytes))
	}

	// Check hash of the block against expected hash.
	hash := TestNet3Params.GenesisBlock.BlockHash()
	if !TestNet3Params.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestTestNet3GenesisBlock: Genesis block hash does "+
			"not appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(TestNet3Params.GenesisHash))
	}
}

// TestSimNetGenesisBlock tests the genesis block of the simulation test network
// for validity by checking the encoded bytes and hashes.
func TestSimNetGenesisBlock(t *testing.T) {
	// Encode the genesis block to raw bytes.
	var buf bytes.Buffer
	err := SimNetParams.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestSimNetGenesisBlock: %v", err)
	}

	// Ensure the encoded block matches the expected bytes.
	if !bytes.Equal(buf.Bytes(), simNetGenesisBlockBytes) {
		t.Fatalf("TestSimNetGenesisBlock: Genesis block does not "+
			"appear valid - got %v, want %v",
			spew.Sdump(buf.Bytes()),
			spew.Sdump(simNetGenesisBlockBytes))
	}

	// Check hash of the block against expected hash.
	hash := SimNetParams.GenesisBlock.BlockHash()
	if !SimNetParams.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestSimNetGenesisBlock: Genesis block hash does "+
			"not appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(SimNetParams.GenesisHash))
	}
}

// genesisBlockBytes are the wire encoded bytes for the genesis block of the
// main network as of protocol version 60002.
// TODO(prova): replace with real bytes
var genesisBlockBytes = []byte{
	0x01, 0x00, 0x00, 0x00, /** Block Version */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Prev block hash */

	0xca, 0x60, 0xab, 0x05, 0x57, 0x9b, 0x80, 0x4b,
	0x24, 0x56, 0x43, 0x13, 0xdc, 0x7a, 0xff, 0xea,
	0x44, 0x96, 0x87, 0x8e, 0x47, 0x00, 0xff, 0x8b,
	0xbd, 0x1c, 0xd0, 0xf9, 0x91, 0x30, 0x13, 0x84, /** Tx merkle root */
	0x29, 0xab, 0x5f, 0x49, 0x00, 0x00, 0x00, 0x00, /** Timestamp */
	0xff, 0xff, 0x00, 0x1d, /** Difficulty target **/
	0x00, 0x00, 0x00, 0x00, /** Height */
	0x00, 0x00, 0x00, 0x00, /** Block size */
	0x1d, 0xac, 0x2b, 0x7c, 0x00, 0x00, 0x00, 0x00, /** Nonce */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, /** Validate pubkey */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Validate sig */
	0x01,                   /** Number of transactions */
	0x01, 0x00, 0x00, 0x00, /** Transaction version number */
	0x01, /** Number of inputs */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Outpoint tx hash */
	0xff, 0xff, 0xff, 0xff, /** Outpoint index */
	0x4d, /** Input script byte count */
	0x04, 0xff, 0xff, 0x00, 0x1d, 0x01, 0x04, 0x45,
	0x54, 0x68, 0x65, 0x20, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x20, 0x30, 0x33, 0x2f, 0x4a, 0x61, 0x6e,
	0x2f, 0x32, 0x30, 0x30, 0x39, 0x20, 0x43, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x6f, 0x72,

	0x20, 0x6f, 0x6e, 0x20, 0x62, 0x72, 0x69, 0x6e,
	0x6b, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x20, 0x62, 0x61, 0x69, 0x6c,
	0x6f, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x62, 0x61, 0x6e, 0x6b, 0x73, /** Script bytes */
	0xff, 0xff, 0xff, 0xff, /** Sequence number */
	0x03,                                           /** Output count */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Value */
	0x02,       /** Script byte count */
	0x00, 0xbb, /** Admin script output: root thread */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Value */
	0x02,       /** Script byte count */
	0x51, 0xbb, /** Admin script output: provision thread */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Value */
	0x02,       /** Script byte count */
	0x52, 0xbb, /** Admin script output: issue thread */
	0x00, 0x00, 0x00, 0x00, /** Lock Time */
}

// regTestGenesisBlockBytes are the wire encoded bytes for the genesis block of
// the regression test network as of protocol version 60002.
var regTestGenesisBlockBytes = []byte{
	0x01, 0x00, 0x00, 0x00, /** Block Version */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Prev block hash */
	0xca, 0x60, 0xab, 0x05, 0x57, 0x9b, 0x80, 0x4b,
	0x24, 0x56, 0x43, 0x13, 0xdc, 0x7a, 0xff, 0xea,
	0x44, 0x96, 0x87, 0x8e, 0x47, 0x00, 0xff, 0x8b,
	0xbd, 0x1c, 0xd0, 0xf9, 0x91, 0x30, 0x13, 0x84, /** Tx merkle root */
	0xda, 0xe5, 0x49, 0x4d, 0x00, 0x00, 0x00, 0x00, /** Timestamp */
	0x0f, 0x0f, 0x0f, 0x20, /** Difficulty target **/
	0x00, 0x00, 0x00, 0x00, /** Height */
	0x00, 0x00, 0x00, 0x00, /** Block size */
	0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Nonce */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, /** Validate pubkey */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Validate sig */
	0x01,                   /** Number of transactions */
	0x01, 0x00, 0x00, 0x00, /** Transaction version number */
	0x01, /** Number of inputs */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Outpoint tx hash */
	0xff, 0xff, 0xff, 0xff, /** Outpoint index */
	0x4d, /** Input script byte count */
	0x04, 0xff, 0xff, 0x00, 0x1d, 0x01, 0x04, 0x45,
	0x54, 0x68, 0x65, 0x20, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x20, 0x30, 0x33, 0x2f, 0x4a, 0x61, 0x6e,
	0x2f, 0x32, 0x30, 0x30, 0x39, 0x20, 0x43, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x6f, 0x72,

	0x20, 0x6f, 0x6e, 0x20, 0x62, 0x72, 0x69, 0x6e,
	0x6b, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x20, 0x62, 0x61, 0x69, 0x6c,
	0x6f, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x62, 0x61, 0x6e, 0x6b, 0x73, /** Script bytes */
	0xff, 0xff, 0xff, 0xff, /** Sequence number */
	0x03,                                           /** Output count */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Value */
	0x02,       /** Script byte count */
	0x00, 0xbb, /** Admin script output: root thread */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Value */
	0x02,       /** Script byte count */
	0x51, 0xbb, /** Admin script output: provision thread */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Value */
	0x02,       /** Script byte count */
	0x52, 0xbb, /** Admin script output: issue thread */
	0x00, 0x00, 0x00, 0x00, /** Lock Time */
}

// testNet3GenesisBlockBytes are the wire encoded bytes for the genesis block of
// the test network (version 3) as of protocol version 60002.
var testNet3GenesisBlockBytes = []byte{
	0x01, 0x00, 0x00, 0x00, /** Block Version */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Prev block hash */
	0xca, 0x60, 0xab, 0x05, 0x57, 0x9b, 0x80, 0x4b,
	0x24, 0x56, 0x43, 0x13, 0xdc, 0x7a, 0xff, 0xea,
	0x44, 0x96, 0x87, 0x8e, 0x47, 0x00, 0xff, 0x8b,
	0xbd, 0x1c, 0xd0, 0xf9, 0x91, 0x30, 0x13, 0x84, /** Tx merkle root */
	0xa1, 0x1e, 0x13, 0x58, 0x00, 0x00, 0x00, 0x00, /** Timestamp */
	0xff, 0xff, 0x07, 0x20, /** Difficulty target **/
	0x00, 0x00, 0x00, 0x00, /** Height */
	0x00, 0x00, 0x00, 0x00, /** Block size */
	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Nonce */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, /** Validate pubkey */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Validate sig */
	0x01,                   /** Number of transactions */
	0x01, 0x00, 0x00, 0x00, /** Transaction version number */
	0x01, /** Number of inputs */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Outpoint tx hash */
	0xff, 0xff, 0xff, 0xff, /** Outpoint index */
	0x4d, /** Input script byte count */
	0x04, 0xff, 0xff, 0x00, 0x1d, 0x01, 0x04, 0x45,
	0x54, 0x68, 0x65, 0x20, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x20, 0x30, 0x33, 0x2f, 0x4a, 0x61, 0x6e,
	0x2f, 0x32, 0x30, 0x30, 0x39, 0x20, 0x43, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x6f, 0x72,

	0x20, 0x6f, 0x6e, 0x20, 0x62, 0x72, 0x69, 0x6e,
	0x6b, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x20, 0x62, 0x61, 0x69, 0x6c,
	0x6f, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x62, 0x61, 0x6e, 0x6b, 0x73, /** Script bytes */
	0xff, 0xff, 0xff, 0xff, /** Sequence number */
	0x03,                                           /** Output count */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Value */
	0x02,       /** Script byte count */
	0x00, 0xbb, /** Admin script output: root thread */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Value */
	0x02,       /** Script byte count */
	0x51, 0xbb, /** Admin script output: provision thread */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Value */
	0x02,       /** Script byte count */
	0x52, 0xbb, /** Admin script output: issue thread */
	0x00, 0x00, 0x00, 0x00, /** Lock Time */
}

// simNetGenesisBlockBytes are the wire encoded bytes for the genesis block of
// the simulation test network as of protocol version 70002.
var simNetGenesisBlockBytes = []byte{
	0x01, 0x00, 0x00, 0x00, /** Block Version */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Prev block hash */
	0xca, 0x60, 0xab, 0x05, 0x57, 0x9b, 0x80, 0x4b,
	0x24, 0x56, 0x43, 0x13, 0xdc, 0x7a, 0xff, 0xea,
	0x44, 0x96, 0x87, 0x8e, 0x47, 0x00, 0xff, 0x8b,
	0xbd, 0x1c, 0xd0, 0xf9, 0x91, 0x30, 0x13, 0x84, /** Tx merkle root */
	0x45, 0x06, 0x86, 0x53, 0x00, 0x00, 0x00, 0x00, /** Timestamp */
	0xff, 0xff, 0x7f, 0x20, /** Difficulty target **/
	0x00, 0x00, 0x00, 0x00, /** Height */
	0x00, 0x00, 0x00, 0x00, /** Block size */
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Nonce */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, /** Validate pubkey */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Validate sig */
	0x01,                   /** Number of transactions */
	0x01, 0x00, 0x00, 0x00, /** Transaction version number */
	0x01, /** Number of inputs */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Outpoint tx hash */
	0xff, 0xff, 0xff, 0xff, /** Outpoint index */
	0x4d, /** Input script byte count */
	0x04, 0xff, 0xff, 0x00, 0x1d, 0x01, 0x04, 0x45,
	0x54, 0x68, 0x65, 0x20, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x20, 0x30, 0x33, 0x2f, 0x4a, 0x61, 0x6e,
	0x2f, 0x32, 0x30, 0x30, 0x39, 0x20, 0x43, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x6f, 0x72,

	0x20, 0x6f, 0x6e, 0x20, 0x62, 0x72, 0x69, 0x6e,
	0x6b, 0x20, 0x6f, 0x66, 0x20, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x20, 0x62, 0x61, 0x69, 0x6c,
	0x6f, 0x75, 0x74, 0x20, 0x66, 0x6f, 0x72, 0x20,
	0x62, 0x61, 0x6e, 0x6b, 0x73, /** Script bytes */
	0xff, 0xff, 0xff, 0xff, /** Sequence number */
	0x03,                                           /** Output count */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Value */
	0x02,       /** Script byte count */
	0x00, 0xbb, /** Admin script output: root thread */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Value */
	0x02,       /** Script byte count */
	0x51, 0xbb, /** Admin script output: provision thread */
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, /** Value */
	0x02,       /** Script byte count */
	0x52, 0xbb, /** Admin script output: issue thread */
	0x00, 0x00, 0x00, 0x00, /** Lock Time */
}
